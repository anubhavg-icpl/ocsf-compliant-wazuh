name: Wazuh-OCSF Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly security scan

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: wazuh-ocsf-logstash

jobs:
  test-field-mappings:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install jsonschema pytest pyyaml

      - name: Validate field mappings
        run: |
          python tests/test_field_mappings.py

      - name: Test OCSF schema compliance
        run: |
          python tests/test_ocsf_validation.py

  test-logstash-config:
    runs-on: ubuntu-latest
    services:
      opensearch:
        image: opensearchproject/opensearch:2.11.0
        env:
          discovery.type: single-node
          DISABLE_SECURITY_PLUGIN: true
        ports:
          - 9200:9200

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Download Logstash
        run: |
          wget https://artifacts.elastic.co/downloads/logstash/logstash-8.11.0-linux-x86_64.tar.gz
          tar -xzf logstash-8.11.0-linux-x86_64.tar.gz

      - name: Install Logstash plugins
        run: |
          cd logstash-8.11.0
          bin/logstash-plugin install logstash-input-opensearch
          bin/logstash-plugin install logstash-output-opensearch

      - name: Test configuration syntax
        run: |
          cd logstash-8.11.0
          bin/logstash -f ../wazuh-ocsf-pipeline.conf --config.test_and_exit

      - name: Run integration tests
        run: |
          python tests/test_integration.py

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          pip install pytest pytest-cov jsonschema requests

      - name: Run unit tests
        run: |
          pytest tests/ --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  build-and-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.logstash
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.logstash
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  performance-test:
    runs-on: ubuntu-latest
    needs: [test-logstash-config]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 60  # Wait for services to be ready

      - name: Generate test data
        run: |
          python tests/generate_test_data.py --count 10000

      - name: Run performance tests
        run: |
          python tests/test_performance.py

      - name: Collect metrics
        run: |
          python tests/collect_metrics.py

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [unit-tests, build-and-scan, performance-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add actual deployment commands here

      - name: Run smoke tests
        run: |
          python tests/smoke_tests.py --env staging

  deploy-production:
    runs-on: ubuntu-latest
    needs: [unit-tests, build-and-scan, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add actual deployment commands here

      - name: Run smoke tests
        run: |
          python tests/smoke_tests.py --env production

      - name: Update deployment status
        run: |
          echo "Pipeline deployment completed successfully"